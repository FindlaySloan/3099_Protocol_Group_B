swagger: '2.0'

info:
  description: This is the protocol that will be used by Group B in the CS3099 federated social media project. Here is a link to the document describing how digital signatures work. https://datatracker.ietf.org/doc/draft-ietf-httpbis-message-signatures/?include_text=1
  version: 1.0.0
  title: 3099 Group B Protocol
  # put the contact info for your development or API team

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations

tags:

  - name: Users
    description: Requests relating to the Users
  - name: Forums
    description: Requests relating to the Forums
  - name: Subforums
    description: Requests relating to the Subforums
  - name: Posts
    description: Requests relating to the Posts
  - name: Comments
    description: Requests relating to the Comments
  - name: Public Key
    description: Requests relating to the Public Key

# This is where the http requests go
paths:

  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Gets individual user
      description: |
        This request obtains an individual user based on the user id. It will return a single user json object
      produces:
        - application/json
      parameters:
      - name: id
        in: path
        description: "ID of user to return"
        required: true
        type: "string"
        format: "uuid"
      responses:
        "200":
          description: User Exists and the Json object has been retrived successfully.
          schema:
            $ref: '#/definitions/IndividualUser'
        "403":
          description: Forbidden. If permissions not allowed.
        "404":
          description: User not found.

  /api/users/{id}/posts:
    get:
      tags:
        - Users
      summary: Gets an individual users posts
      description: |
        This request obtains an individual users posts based on the user id. It will return a json object containing all of the posts
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: "ID of user to obtain the posts"
          required: true
          type: "integer"
          format: "int64"
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/skipParam'
        - $ref: '#/parameters/byEntryParam'
      responses:
        "200":
          description: User Exists and the Json object has been retrived successfully.
          schema:
            $ref: '#/definitions/Posts'
        "400":
          description: Bad Request. If the index parameters or enum doesn't make sense.
        "403":
          description: Forbidden. If permissions not allowed.
        "404":
          description: User not found.

  /api/users/{id}/commments:
    get:
      tags:
        - Users
      summary: Gets an individual users comments
      description: |
        This request obtains an individual users comments based on the user id. It will return a json object containing all of the comments
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: "ID of user to obtain the comments"
          required: true
          type: "integer"
          format: "int64"
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/skipParam'
        - $ref: '#/parameters/byEntryParam'
      responses:
        "200":
          description: User Exists and the Json object has been retrived successfully.
          schema:
            $ref: '#/definitions/Comments'
        "400":
          description: Bad Request. If the index parameters or enum doesn't make sense.
        "403":
          description: Forbidden. If permissions not allowed.
        "404":
          description: User not found.

  /api/users:
    get:
      tags:
        - Users
      summary: Gets list of users
      description: |
        This request obtains the list of all users. It will return a json object that contains an array of individual user objects
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/skipParam'
        - $ref: '#/parameters/byUserParam'
      responses:
        "200":
          description: The list of users has been retrieved successfully
          schema:
            $ref: '#/definitions/Users'
        "400":
          description: Bad Request. If the index parameters or enum doesn't make sense.
        "403":
          description: Forbidden. If permissions not allowed.

  /api/forums/{id}:
    get:
      tags:
        - Forums
      summary: Gets individual forum
      description: |
        This request obtains an individual forum based on the forum id. It will return a single forum json object
      produces:
        - application/json
      parameters:
      - name: id
        in: path
        description: "ID of forum to return"
        required: true
        type: "string"
        format: "uuid"
      responses:
        "200":
          description: Forum Exists and the Json object has been retrived successfully.
          schema:
            $ref: '#/definitions/IndividualForum'
        "403":
          description: Forbidden. If permissions not allowed.
        "404":
          description: User not found.

  /api/forums:
    get:
      tags:
        - Forums
      summary: Gets list of forums
      description: |
        This request obtains the list of all forums. It will return a json object that contains an array of individual forum objects
      produces:
        - application/json
      responses:
        "200":
          description: The list of forums has been retrieved successfully
          schema:
            $ref: '#/definitions/Forums'
        "403":
          description: Forbidden. If permissions not allowed.

  /api/subforums/{id}:
    get:
      tags:
        - Subforums
      summary: Gets individual subforum
      description: |
        This request obtains an individual subforum based on the subforum id. It will return a single subforum json object
      produces:
        - application/json
      parameters:
      - name: id
        in: path
        description: "ID of subforum to return"
        required: true
        type: "string"
        format: "uuid"
      responses:
        "200":
          description: Subforum Exists and the Json object has been retrived successfully.
          schema:
            $ref: '#/definitions/IndividualSubforum'
        "403":
          description: Forbidden. If permissions not allowed.
        "404":
          description: User not found.

  /api/forums/{id}/subforums:
    get:
      tags:
        - Subforums
      summary: Gets list of subforums
      description: |
        This request obtains the list of all subforums for a given form. It will return a json object that contains an array of individual subforum objects
      parameters:
      - name: id
        in: path
        description: "ID of forum for which all subforums are to be obtained"
        required: true
        type: "string"
        format: "uuid"
      produces:
        - application/json
      responses:
        "200":
          description: The list of subforums has been retrieved successfully
          schema:
            $ref: '#/definitions/Subforums'
        "403":
          description: Forbidden. If permissions not allowed.

  /api/posts:
    get:
      tags:
        - Posts
      summary: Gets all Posts.
      description: |
        This request obtains a list of posts which can be sorted by a given sorting parameter. You can also specify the number of posts being retrieved.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 0
          required: false
          description: The maximum number of posts being retrieved.
        - in: query
          name: skip
          schema:
            type: integer
            minimum: 0
          required: false
          description: The number of items being skipped before the posts that are being retrieved.
        - in: query
          name: by
          schema:
            type: string
            enum:
              - ranking
              - createdTime
              - modifiedTime
          required: false
          description: The field by which items are being sorted.
      produces:
        - application/json
      responses:
        "200":
          description: The list of posts has been retrieved correctly.
          schema:
            $ref: '#defintions/Posts'
        "403":
            description: Forbidden. If permissions not allowed.
        "400":
          description: Bad Request. If the index parameters or enum doesn't make sense.
  /api/posts/{id}:
    get:
      tags:
        - Posts
      summary: Gets an Individual Post
      description: |
        This request obtains an individual post based on the post id. It will return a single post json object
      parameters:
      - name: id
        in: path
        description: "ID of post to be obtained"
        required: true
        type: "string"
        format: "uuid"
      produces:
        - application/json
      responses:
        "200":
          description: The individual post has been retrieved successfully
          schema:
            $ref: '#/definitions/IndividualPost'
        "403":
          description: Forbidden. If permissions not allowed.
        "404":
          description: Post not found.

    patch:
      tags:
        - Posts
      summary: Updates an Individual Post
      description: |
        This request updates an individual post based on the post id
      parameters:
        - name: id
          in: path
          description: "ID of post to be replaced"
          required: true
          type: "integer"
          format: "int64"

        - name: post
          in: body
          description: "Updated post title and content in a json format"
          required: true
          schema:
            $ref: '#/definitions/PostUpdateRequestBody'

      consumes:
        - application/json
      responses:
        "200":
          description: The individual posts has been replaced successfully
        "403":
          description: Forbidden. If permissions not allowed.
        "404":
          description: Post not found.

    delete:
      tags:
        - Posts
      summary: Deletes an Individual Post
      description: |
        This request deletes an individual post based on the post ID
      parameters:
        - name: id
          in: path
          description: "ID of post to be obtained"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: The individual posts has been replaced successfully
        "403":
          description: Forbidden. If permissions not allowed.
        "404":
          description: Post not found.

  /api/subforums/{id}/posts:
    get:
      tags:
        - Posts
      summary: Gets list of posts
      description: |
        This request obtains the list of all posts for a given subform. It will return a json object that contains an array of individual post objects
      parameters:
      - name: id
        in: path
        description: "ID of subforum for which all posts are to be obtained"
        required: true
        type: "string"
        format: "uuid"
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/skipParam'
      - $ref: '#/parameters/byEntryParam'
      produces:
        - application/json
      responses:
        "200":
          description: The list of posts has been retrieved successfully
          schema:
            $ref: '#/definitions/Posts'
        "400":
          description: Bad Request. If the index parameters or enum doesn't make sense.
        "403":
          description: Forbidden. If permissions not allowed.

    post:
      tags:
        - Posts
      summary: Creates a new Post
      description: |
        This request sends an individual post. It is used to create a new post. The json object will be sent in the request body of the http request.

      parameters:
      - name: id
        in: path
        description: "ID of subforum for which all posts are to be obtained"
        required: true
        type: "string"
        format: "uuid"

      - name: post
        in: body
        description: "The required information for the post in a json format"
        required: true
        schema:
          $ref: '#/definitions/PostCreateRequestBody'

      consumes:
        - application/json

      produces:
        - application/json
      responses:
        "200":
          description: The post has been sent successfully and a json object of the sent post is returned
          schema:
            $ref: '#/definitions/IndividualPost'
        "403":
          description: Forbidden. If permissions not allowed.

  /api/comments:
    get:
      tags:
        - Comments
      summary: Gets all Comments.
      description: |
        This request obtains a list of comments which can be sorted by a given sorting parameter. You can also specify the number of comments being retrieved.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 0
          required: false
          description: The maximum number of comments being retrieved.
        - in: query
          name: skip
          schema:
            type: integer
            minimum: 0
          required: false
          description: The number of items being skipped before the comments that are being retrieved.
        - in: query
          name: by
          schema:
            type: string
            enum:
              - ranking
              - createdTime
              - modifiedTime
          required: false
          description: The field by which items are being sorted.
      produces:
        - application/json
      responses:
        "200":
          description: The list of comments has been retrieved correctly.
          schema:
            $ref: '#defintions/Posts'
        "403":
          description: Forbidden. If permissions not allowed.
        "400":
          description: Bad Request. If the index parameters or enum doesn't make sense.

  /api/comments/{id}:
    get:
      tags:
        - Comments
      summary: Gets an Individual Comment
      description: |
        This request obtains an individual comment based on the comment id. It will return a single comment json object
      parameters:
      - name: id
        in: path
        description: "ID of comment to be obtained"
        required: true
        type: "string"
        format: "uuid"
      produces:
        - application/json
      responses:
        "200":
          description: The individual comment has been retrieved successfully
          schema:
            $ref: '#/definitions/IndividualComment'
        "403":
          description: Forbidden. If permissions not allowed.
        "404":
          description: Comment not found.

    patch:
      tags:
        - Comments
      summary: Updates an Individual Comment
      description: |
        This request updates an individual comment based on the comment ID.
      parameters:
        - name: id
          in: path
          description: "ID of comment to be replaced"
          required: true
          type: "integer"
          format: "int64"

        - name: comment
          in: body
          description: "Updated comment content in a json format"
          required: true
          schema:
            $ref: '#/definitions/CommentUpdateRequestBody'

      consumes:
        - application/json
      responses:
        "200":
          description: The individual comment has been replaced successfully
        "403":
          description: Forbidden. If permissions not allowed.
        "404":
          description: Comment not found.

    delete:
      tags:
        - Comments
      summary: Deletes an Individual Comment
      description: |
        This request replaces an individual comment based on the comment ID.
      parameters:
        - name: id
          in: path
          description: "ID of comment to be deleted"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: The individual comment has been deleted successfully
        "403":
          description: Forbidden. If permissions not allowed.
        "404":
          description: Comment not found.

  /api/posts/{id}/comments:
    get:
      tags:
        - Comments
      summary: Gets list of parent comments of a post
      description: |
        This request obtains the list of all parent comments for a given post. It will return a json object that contains an array of individual comment objects. To obtain children comments of the returned comments, a seperate get request is required.
      parameters:
      - name: id
        in: path
        description: "ID of post for which all comments are to be obtained"
        required: true
        type: "string"
        format: "uuid"
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/skipParam'
      - $ref: '#/parameters/byEntryParam'
      produces:
        - application/json
      responses:
        "200":
          description: The list of comments has been retrieved successfully
          schema:
            $ref: '#/definitions/Comments'
        "400":
          description: Bad Request. If the index parameters or enum doesn't make sense.
        "403":
          description: Forbidden. If permissions not allowed.
        "404":
          description: Post not found.

    post:
      tags:
        - Comments
      summary: Creates a new comment
      description: |
        This request sends an individual comment. It is used to create a new comment. The json object will be sent in the request body of the http request. It is worth noting that this request is for creating a top level parent comment and not a child comment.
      parameters:
      - name: id
        in: path
        description: "ID of post for the comment to be added to"
        required: true
        type: "string"
        format: "uuid"

      - name: comment
        in: body
        description: "The required information for the comment in a json format"
        required: true
        schema:
          $ref: '#/definitions/CommentCreateRequestBody'

      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: The comment has been sent successfully and an indivdual comment json object will be returned
          schema:
            $ref: '#/definitions/IndividualComment'
        "403":
          description: Forbidden. If permissions not allowed.
        "404":
          description: Post not found.

  /api/comments/{id}/comments:
    get:
      tags:
        - Comments
      summary: Gets list of children comments of a post
      description: |
        This request obtains the list of all children comments for a given post. It will return a json object that contains an array of individual comment objects.
      parameters:
        - name: id
          in: path
          description: "ID of comment for which all children comments are to be obtained"
          required: true
          type: "integer"
          format: "int64"
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/skipParam'
        - $ref: '#/parameters/byEntryParam'
      produces:
        - application/json
      responses:
        "200":
          description: The list of comments has been retrieved successfully
          schema:
            $ref: '#/definitions/Comments'
        "400":
          description: Bad Request. If the index parameters or enum doesn't make sense.
        "403":
          description: Forbidden. If permissions not allowed.
        "404":
          description: Comment not found.

    post:
      tags:
        - Comments
      summary: Creates a new child comment
      description: |
        This request sends an individual comment. It is used to create a new child comment. The json object will be sent in the request body of the http request. It is worth noting that this request does not create a top level parent comment.
      parameters:
        - name: id
          in: path
          description: "ID of comment for the child comment to be added to"
          required: true
          type: "integer"
          format: "int64"

        - name: comment
          in: body
          description: "The required information for the comment in a json format"
          required: true
          schema:
            $ref: '#/definitions/CommentCreateRequestBody'

      consumes:
        - application/json

      produces:
        - application/json
      responses:
        "200":
          description: The comment has been sent successfully and an indivdual comment json object will be returned
          schema:
            $ref: '#/definitions/IndividualComment'
        "403":
          description: Forbidden. If permissions not allowed.
        "404":
          description: Comment not found.

  /api/key:
    get:
      tags:
        - Public Key
      summary: Gets the public key for a server
      description: |
        This requests obtains the public key for the server.
      responses:
        "200":
          description: The key has been obtained
          schema:
            $ref: '#/definitions/PublicKeyRequestBody'

# This is where the json definitions go
definitions:

  IndividualUser:
    type: object
    required:
    - id
    - username
    - description
    - _links
    properties:
      id:
        type: string
        format: uuid
        example: 46659ec8-ebe8-4713-a435-c0e7c8cefc75

      username:
        type: string
        example: "SamwiseGamgee123"

      createdTime:
        type: integer
        format: int64
        example: 1611071139539
      description:
        type: string
        example: "Hi, I am Samwise Gamgee"

      _links:
        type: object
        required:
          - self
          - users

        properties:
          self:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/users/46659ec8-ebe8-4713-a435-c0e7c8cefc75"

          users:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/users"

  Users:
    type: object
    required:
      - _embedded
      - _links

    properties:
      _embedded:
        type: object
        required:
          - userList
        properties:
          totalCount:
            type: integer
            description: Total number of existing entries
          userList:
            type: array
            items: {
              $ref: '#/definitions/IndividualUser'
            }

      _links:
        type: object
        required:
          - self
        properties:
          self:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/users"

  IndividualForum:
    type: object
    required:
      - id
      - forumName
      - _links
    properties:
      id:
        type: string
        format: uuid
        example: 46659ec8-ebe8-4713-a435-c0e7c8cefc75

      forumName:
        type: string
        example: "Computer Science"

      _links:
        type: object
        required:
          - self
          - forums
          - subforums

        properties:
          self:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/forums/46659ec8-ebe8-4713-a435-c0e7c8cefc75"

          forums:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/forums"

          subforums:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/forums/46659ec8-ebe8-4713-a435-c0e7c8cefc75/subforums"

  Forums:
    type: object
    required:
      - _embedded
      - _links

    properties:
      _embedded:
        type: object
        required:
          - forumList
        properties:
          forumList:
            type: array
            items: {
              $ref: '#/definitions/IndividualForum'
            }

      _links:
        type: object
        required:
          - self
        properties:
          self:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/forums"

  IndividualSubforum:
    type: object
    required:
      - id
      - subforumName
      - forumId
      - _links
    properties:
      id:
        type: string
        format: uuid
        example: 46659ec8-ebe8-4713-a435-c0e7c8cefc75

      subforumName:
        type: string
        example: "CS3050"

      forumId:
        type: string
        format: uuid
        example: 46659ec8-ebe8-4713-a435-c0e7c8cefc75

      _links:
        type: object
        required:
          - self
          - forum
          - posts

        properties:
          self:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/subforums/46659ec8-ebe8-4713-a435-c0e7c8cefc75"

          forum:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/forums/46659ec8-ebe8-4713-a435-c0e7c8cefc75"

          posts:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/subforums/46659ec8-ebe8-4713-a435-c0e7c8cefc75/posts"

  Subforums:
    type: object
    required:
      - _embedded
      - _links

    properties:
      _embedded:
        type: object
        required:
          - subforumList
        properties:
          subforumList:
            type: array
            items: {
              $ref: '#/definitions/IndividualSubforum'
            }

      _links:
        type: object
        required:
          - self
        properties:
          self:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/forums/46659ec8-ebe8-4713-a435-c0e7c8cefc75/subforums"

  IndividualPost:
    type: object
    required:
      - id
      - postTitle
      - postContents
      - createdTime
      - modifiedTime
      - userId
      - subforumId
      - _links

    properties:

      id:
        type: string
        format: uuid
        example: 46659ec8-ebe8-4713-a435-c0e7c8cefc75

      postTitle:
        type: string
        example: "This is a post"

      postContents:
        type: string
        example: "Markdown goes here"

      createdTime:
        type: integer
        format: int64
        example: 1611071139539

      modifiedTime:
        type: integer
        format: int64
        example: 1611071139539

      userId:
        type: string
        format: uuid
        example: 46659ec8-ebe8-4713-a435-c0e7c8cefc75

      subforumId:
        type: string
        format: uuid
        example: 46659ec8-ebe8-4713-a435-c0e7c8cefc75

      _links:
        type: object
        required:
          - self
          - subforum
          - forum
          - user
          - comments

        properties:
          self:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/posts/46659ec8-ebe8-4713-a435-c0e7c8cefc75"

          subforum:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/subforums/46659ec8-ebe8-4713-a435-c0e7c8cefc75"

          forum:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/forums/46659ec8-ebe8-4713-a435-c0e7c8cefc75"

          user:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/users/46659ec8-ebe8-4713-a435-c0e7c8cefc75"

          comments:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/posts/46659ec8-ebe8-4713-a435-c0e7c8cefc75/comments"

  Posts:
    type: object
    required:
      - _embedded
      - _links

    properties:
      _embedded:
        type: object
        required:
          - postList
        properties:
          totalCount:
            type: integer
            description: Total number of existing entries
          postList:
            type: array
            items: {
              $ref: '#/definitions/IndividualPost'
            }

      _links:
        type: object
        required:
          - self
        properties:
          self:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/subforums/46659ec8-ebe8-4713-a435-c0e7c8cefc75/posts"

  PostCreateRequestBody:
    type: object
    required: [
        postTitle,
        postContents,
        userId,
    ]

    properties:
      postTitle:
        type: string
        example: "This is a title"
      postContents:
        type: string
        example: "Markdown goes here"
      userId:
        type: string
        format: uuid
        example: 46659ec8-ebe8-4713-a435-c0e7c8cefc75

  PostUpdateRequestBody:
    type: object
    required: [
      postTitle,
      postContents,
      userId,
    ]

    properties:
      postTitle:
        type: string
        example: "Updated title"
      postContents:
        type: string
        example: "Updated post content"

  IndividualComment:
    type: object
    required:
      - id
      - commentContent
      - createdTime
      - modifiedTime
      - userId
      - postId
      - _links

    properties:

      id:
        type: string
        format: uuid
        example: 46659ec8-ebe8-4713-a435-c0e7c8cefc75

      commentContent:
        type: string
        example: "This is a comment"

      createdTime:
        type: integer
        format: int64
        example: 1611071139539

      modifiedTime:
        type: integer
        format: int64
        example: 1611071139539

      userId:
        type: string
        format: uuid
        example: 46659ec8-ebe8-4713-a435-c0e7c8cefc75

      username:
        type: string
        example: "SamwiseGamgee123"

      postId:
        type: string
        format: uuid
        example: 46659ec8-ebe8-4713-a435-c0e7c8cefc75

      _links:
        type: object
        required:
        - self
        - subforum
        - forum
        - user
        - childComments

        properties:
          self:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/posts/46659ec8-ebe8-4713-a435-c0e7c8cefc75"

          post:
            type: object
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/posts/46659ec8-ebe8-4713-a435-c0e7c8cefc75"

          parentComment:
            type: object
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/comments/46659ec8-ebe8-4713-a435-c0e7c8cefc75"

          subforum:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/subforums/46659ec8-ebe8-4713-a435-c0e7c8cefc75"

          forum:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/forums/46659ec8-ebe8-4713-a435-c0e7c8cefc75"

          user:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/users/46659ec8-ebe8-4713-a435-c0e7c8cefc75"

          childComments:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/comments/46659ec8-ebe8-4713-a435-c0e7c8cefc75/comments"

  Comments:
    type: object
    required:
      - _embedded
      - _links

    properties:
      _embedded:
        type: object
        required:
          - commentList
        properties:
          totalCount:
            type: integer
            description: Total number of existing entries
          commentList:
            type: array
            items: {
              $ref: '#/definitions/IndividualComment'
            }

      _links:
        type: object
        required:
          - self
        properties:
          self:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: url
                example: "<url>/api/posts/46659ec8-ebe8-4713-a435-c0e7c8cefc75/comments"

  CommentCreateRequestBody:
    type: object
    required: [
        commentContent,
        userId,
        username,
    ]

    properties:
      commentContent:
        type: string
        example: "This is a comment"
      userId:
        type: string
        format: uuid
        example: 46659ec8-ebe8-4713-a435-c0e7c8cefc75
      username:
        type: string
        example: "SamwiseGamgee123"

  CommentUpdateRequestBody:
    type: object
    required: [
      commentContent,
      userId,
      username,
    ]

    properties:
      commentContent:
        type: string
        example: "Updated comment string"

  PublicKeyRequestBody:
    type: object
    required: [ key ]
    properties:
      key:
        type: string
        example: "AAAAB3NzaC1yc2EAAAABJQAAAQB/nAmOjTmezNUDKYvEeIRf2YnwM9/uUG1d0BYsc8/tRtx+RGi7N2lUbp728MXGwdnL9od4cItzky/zVdLZE2cycOa18xBK9cOWmcKS0A8FYBxEQWJ/q9YVUgZbFKfYGaGQxsER+A0w/fX8ALuk78ktP31K69LcQgxIsl7rNzxsoOQKJ/CIxOGMMxczYTiEoLvQhapFQMs3FL96didKr/QbrfB1WT6s3838SEaXfgZvLef1YB2xmfhbT9OXFE3FXvh2UPBfN+ffE7iiayQf/2XR+8j4N4bW30DiPtOQLGUrH1y5X/rpNZNlWW2+jGIxqZtgWg7lTy3mXy5x836Sj/6L"

parameters:
  limitParam:
    in: query
    name: limit
    type: integer
    default: 10    # TODO: Should this default be changed?
    minimum: 0
    required: false
    description: The maximum number of posts being retrieved.

  skipParam:
    in: query
    name: skip
    type: integer
    default: 0
    minimum: 0
    required: false
    description: The number of items being skipped before the posts that are being retrieved.

  byEntryParam:
    in: query
    name: by
    type: string
    enum:
      - ranking
      - createdTime
      - modifiedTime
    required: false
    description: |
      Sort order for post/comment entries.
      * ranking - Highest 'ranked' items first.
      * createdTime - Recently created posts first.
      * modifiedTime - Recently modified posts first.

  byUserParam:
    in: query
    name: by
    type: string
    enum:
      - username
    required: false
    description: |
      Sort order for user results.
      * username - Ascending, from A to Z.

schemes:
  - http